buildscript {
    repositories {
        gradlePluginPortal() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    dependencies {
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.22.0'
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.11.0'
        classpath 'com.netflix.nebula:gradle-dependency-lock-plugin:7.0.1'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.107.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:2.10.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.15.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.6.0'
        classpath 'me.champeau.jmh:jmh-gradle-plugin:0.6.5'
    }
}
allprojects {
    apply plugin: 'com.palantir.java-format'
}

apply plugin: 'com.palantir.external-publish'
apply plugin: 'java-library'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.git-version'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'org.inferred.processors'
apply plugin: 'me.champeau.jmh'

group 'com.palantir.ri'
version gitVersion()

apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.baseline-java-versions'

repositories {
    mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
}


dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.palantir.safe-logging:safe-logging'

    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
    testImplementation 'net.jqwik:jqwik'
    testImplementation 'org.junit.jupiter:junit-jupiter'

    jmh 'org.openjdk.jmh:jmh-core'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess'

}

configurations.testCompileClasspath {
    exclude module: 'junit'
}

tasks.withType(Test) {
    useJUnitPlatform {
        includeEngines 'jqwik', 'junit-jupiter'
    }
}

jmh {
    profilers = ['gc']
}

tasks.jmhCompileGeneratedClasses {
    options.annotationProcessorPath = configurations.errorprone
    options.errorprone.enabled = false
}

javaVersions {
    libraryTarget = 11
    runtime = 17
}
